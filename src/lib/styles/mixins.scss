// Global SASS Mixins
// This file contains shared mixins that can be imported by other components

// Breakpoint variables
$breakpoints: (
	'mobile': 767px,
	'tablet': 1023px,
	'desktop': 1279px,
	'small-mobile': 480px,
	'large-mobile': 767px,
	'small-tablet': 899px,
	'large-tablet': 1023px,
	'small-desktop': 1279px,
	'large-desktop': 1280px
);

// Main media query function
@function mq($breakpoint, $type: 'min') {
	@if not map-has-key($breakpoints, $breakpoint) {
		@error "Unknown breakpoint: #{$breakpoint}. Available breakpoints: #{map-keys($breakpoints)}";
	}
	
	$value: map-get($breakpoints, $breakpoint);
	
	@if $type == 'max' {
		@return $value;
	} @else if $type == 'min' {
		@return $value;
	} @else {
		@error "Invalid type: #{$type}. Use 'min' or 'max'";
	}
}

// Media query mixin
@mixin mq($breakpoint, $type: 'min') {
	$value: mq($breakpoint, $type);
	
	@if $type == 'max' {
		@media (max-width: $value) { @content; }
	} @else {
		@media (min-width: $value) { @content; }
	}
}

// Legacy responsive breakpoint mixin (keeping for backward compatibility)
@mixin respond-to($breakpoint) {
	@if $breakpoint == sm {
		@media (min-width: $breakpoint-sm) { @content; }
	} @else if $breakpoint == md {
		@media (min-width: $breakpoint-md) { @content; }
	} @else if $breakpoint == lg {
		@media (min-width: $breakpoint-lg) { @content; }
	} @else if $breakpoint == xl {
		@media (min-width: $breakpoint-xl) { @content; }
	} @else if $breakpoint == 2xl {
		@media (min-width: $breakpoint-2xl) { @content; }
	}
}

// Orientation mixins
@mixin portrait {
	@media (orientation: portrait) { @content; }
}

@mixin landscape {
	@media (orientation: landscape) { @content; }
}

// Touch device detection
@mixin touch-device {
	@media (hover: none) and (pointer: coarse) { @content; }
}

@mixin non-touch-device {
	@media (hover: hover) and (pointer: fine) { @content; }
}

// High DPI displays
@mixin retina {
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { @content; }
}

// Button mixin
@mixin button-base {
	padding: $spacing-sm $spacing-lg;
	border: none;
	border-radius: $border-radius-md;
	font-size: $font-size-base;
	font-weight: 600;
	cursor: pointer;
	transition: all 0.3s ease;
	font-family: $font-family-primary;
	
	&:hover {
		transform: translateY(-2px);
		box-shadow: $shadow-md;
	}
	
	&:active {
		transform: translateY(0);
	}
	
	&:disabled {
		opacity: 0.6;
		cursor: not-allowed;
		transform: none;
		box-shadow: none;
	}
}

// Card mixin
@mixin card-style {
	background: white;
	border-radius: $border-radius-md;
	box-shadow: $shadow-sm;
	padding: $spacing-lg;
	margin: $spacing-md 0;
	transition: box-shadow 0.3s ease;
	
	&:hover {
		box-shadow: $shadow-md;
	}
}

// Flexbox utilities
@mixin flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}

@mixin flex-between {
	display: flex;
	align-items: center;
	justify-content: space-between;
}

@mixin flex-column {
	display: flex;
	flex-direction: column;
}

// Text utilities
@mixin text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin text-gradient($color1, $color2) {
	background: linear-gradient(45deg, $color1, $color2);
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
	background-clip: text;
}

// Animation mixins
@mixin fade-in($duration: 0.3s) {
	animation: fadeIn $duration ease-in-out;
}

@mixin slide-up($duration: 0.3s) {
	animation: slideUp $duration ease-out;
}

// Keyframe animations
@keyframes fadeIn {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

@keyframes slideUp {
	from {
		opacity: 0;
		transform: translateY(20px);
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

// Grid mixins
@mixin grid($columns: 1, $gap: $spacing-md) {
	display: grid;
	grid-template-columns: repeat($columns, 1fr);
	gap: $gap;
}

@mixin grid-responsive($min-width: 250px) {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
	gap: $spacing-md;
}

// Form input mixin
@mixin input-base {
	width: 100%;
	padding: $spacing-sm $spacing-md;
	border: 1px solid $border-color;
	border-radius: $border-radius-sm;
	font-size: $font-size-base;
	font-family: $font-family-primary;
	transition: border-color 0.3s ease, box-shadow 0.3s ease;
	
	&:focus {
		outline: none;
		border-color: $primary-color;
		box-shadow: 0 0 0 3px rgba($primary-color, 0.1);
	}
	
	&:invalid {
		border-color: $error-color;
	}
}

// Utility classes
@mixin sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border: 0;
} 